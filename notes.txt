import cbpro

public_client = cbpro.PublicClient()

This is called a generator
eth_trades = public_client.get_product_trades('ETH-USD')
print(next(eth_trades))
print(next(eth_trades))
print(next(eth_trades))
print(next(eth_trades))
print(next(eth_trades))

result = public_client.get_currencies()

for row in result: 
  print(row['id'])

result = public_client.get_product_order_book('BTC-USD')
# gives the product information and order book

get_product_ticker('BTC-USD') gives the ticker 





The actual main.py

import cbpro

data = open('passphrase', 'r').read().splitlines()

public = data[0]
passphrase = data[1]
secret = data[2]

auth_client = cbpro.AuthenticatedClient(public, secret, passphrase)

# print(auth_client.get_accounts())

print(auth_client.buy(price="10.0", size="0.1", order_type="limit", product_id="ETH-USD"))
print(auth_client.buy(size="10", order_type="market", product_id="ETH-EUR"))

print(auth_client.sell(price="2000000.00", size="10", order-type="limit", product_id="BTC-USD"))
print(auth_client.sell(size="10", order-type="market", product_id="BTC-USD))

Or you can do the following

print(auth_client.place_limit_order(product_id="BTC-EUR", side="buy", price="10.00", size="2"))
print(auth_client.market_order(product_id="BTC-USD", etc...))

OR you can do...

import time

sell_price = 30000
sell_amount = 0.3  

buy_price = 25000
buy_amount = 0.2

while True:
  price = float(auth_client.get_product_ticker(product_id="BTC-EUR")['price'])
  if price <= buy_price:
    print("Buying BTC")
    auth_client.buy((size=buy_amount, order_type="market", product_id="BTC-USD")['price])
  elif price >= sell_price:
    print("Selling BTC-USD because price of {price:,} rose above selling price limit")
    auth_client.sell(size=sell_amount, ordre_type="market", product_id="BTC-USD")
  else:
    print("Nothing...")
  time.sleep(10)